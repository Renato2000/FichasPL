Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Comando
Rule 1     Comando -> ? id
Rule 2     Comando -> ! Exp
Rule 3     Comando -> id = Exp
Rule 4     Comando -> ! !
Rule 5     Exp -> Exp + Termo
Rule 6     Exp -> Exp - Termo
Rule 7     Exp -> Termo
Rule 8     Termo -> Termo * Fator
Rule 9     Termo -> Termo / Fator
Rule 10    Termo -> Fator
Rule 11    Fator -> ( Exp )
Rule 12    Fator -> num
Rule 13    Fator -> id

Terminals, with rules where they appear

!                    : 2 4 4
(                    : 11
)                    : 11
*                    : 8
+                    : 5
-                    : 6
/                    : 9
=                    : 3
?                    : 1
error                : 
id                   : 1 3 13
num                  : 12

Nonterminals, with rules where they appear

Comando              : 0
Exp                  : 2 3 5 6 11
Fator                : 8 9 10
Termo                : 5 6 7 8 9

Parsing method: LALR

state 0

    (0) S' -> . Comando
    (1) Comando -> . ? id
    (2) Comando -> . ! Exp
    (3) Comando -> . id = Exp
    (4) Comando -> . ! !

    ?               shift and go to state 2
    !               shift and go to state 4
    id              shift and go to state 3

    Comando                        shift and go to state 1

state 1

    (0) S' -> Comando .



state 2

    (1) Comando -> ? . id

    id              shift and go to state 5


state 3

    (3) Comando -> id . = Exp

    =               shift and go to state 6


state 4

    (2) Comando -> ! . Exp
    (4) Comando -> ! . !
    (5) Exp -> . Exp + Termo
    (6) Exp -> . Exp - Termo
    (7) Exp -> . Termo
    (8) Termo -> . Termo * Fator
    (9) Termo -> . Termo / Fator
    (10) Termo -> . Fator
    (11) Fator -> . ( Exp )
    (12) Fator -> . num
    (13) Fator -> . id

    !               shift and go to state 7
    (               shift and go to state 11
    num             shift and go to state 12
    id              shift and go to state 13

    Exp                            shift and go to state 8
    Termo                          shift and go to state 9
    Fator                          shift and go to state 10

state 5

    (1) Comando -> ? id .

    $end            reduce using rule 1 (Comando -> ? id .)


state 6

    (3) Comando -> id = . Exp
    (5) Exp -> . Exp + Termo
    (6) Exp -> . Exp - Termo
    (7) Exp -> . Termo
    (8) Termo -> . Termo * Fator
    (9) Termo -> . Termo / Fator
    (10) Termo -> . Fator
    (11) Fator -> . ( Exp )
    (12) Fator -> . num
    (13) Fator -> . id

    (               shift and go to state 11
    num             shift and go to state 12
    id              shift and go to state 13

    Exp                            shift and go to state 14
    Termo                          shift and go to state 9
    Fator                          shift and go to state 10

state 7

    (4) Comando -> ! ! .

    $end            reduce using rule 4 (Comando -> ! ! .)


state 8

    (2) Comando -> ! Exp .
    (5) Exp -> Exp . + Termo
    (6) Exp -> Exp . - Termo

    $end            reduce using rule 2 (Comando -> ! Exp .)
    +               shift and go to state 15
    -               shift and go to state 16


state 9

    (7) Exp -> Termo .
    (8) Termo -> Termo . * Fator
    (9) Termo -> Termo . / Fator

    +               reduce using rule 7 (Exp -> Termo .)
    -               reduce using rule 7 (Exp -> Termo .)
    $end            reduce using rule 7 (Exp -> Termo .)
    )               reduce using rule 7 (Exp -> Termo .)
    *               shift and go to state 17
    /               shift and go to state 18


state 10

    (10) Termo -> Fator .

    *               reduce using rule 10 (Termo -> Fator .)
    /               reduce using rule 10 (Termo -> Fator .)
    +               reduce using rule 10 (Termo -> Fator .)
    -               reduce using rule 10 (Termo -> Fator .)
    $end            reduce using rule 10 (Termo -> Fator .)
    )               reduce using rule 10 (Termo -> Fator .)


state 11

    (11) Fator -> ( . Exp )
    (5) Exp -> . Exp + Termo
    (6) Exp -> . Exp - Termo
    (7) Exp -> . Termo
    (8) Termo -> . Termo * Fator
    (9) Termo -> . Termo / Fator
    (10) Termo -> . Fator
    (11) Fator -> . ( Exp )
    (12) Fator -> . num
    (13) Fator -> . id

    (               shift and go to state 11
    num             shift and go to state 12
    id              shift and go to state 13

    Exp                            shift and go to state 19
    Termo                          shift and go to state 9
    Fator                          shift and go to state 10

state 12

    (12) Fator -> num .

    *               reduce using rule 12 (Fator -> num .)
    /               reduce using rule 12 (Fator -> num .)
    +               reduce using rule 12 (Fator -> num .)
    -               reduce using rule 12 (Fator -> num .)
    $end            reduce using rule 12 (Fator -> num .)
    )               reduce using rule 12 (Fator -> num .)


state 13

    (13) Fator -> id .

    *               reduce using rule 13 (Fator -> id .)
    /               reduce using rule 13 (Fator -> id .)
    +               reduce using rule 13 (Fator -> id .)
    -               reduce using rule 13 (Fator -> id .)
    $end            reduce using rule 13 (Fator -> id .)
    )               reduce using rule 13 (Fator -> id .)


state 14

    (3) Comando -> id = Exp .
    (5) Exp -> Exp . + Termo
    (6) Exp -> Exp . - Termo

    $end            reduce using rule 3 (Comando -> id = Exp .)
    +               shift and go to state 15
    -               shift and go to state 16


state 15

    (5) Exp -> Exp + . Termo
    (8) Termo -> . Termo * Fator
    (9) Termo -> . Termo / Fator
    (10) Termo -> . Fator
    (11) Fator -> . ( Exp )
    (12) Fator -> . num
    (13) Fator -> . id

    (               shift and go to state 11
    num             shift and go to state 12
    id              shift and go to state 13

    Termo                          shift and go to state 20
    Fator                          shift and go to state 10

state 16

    (6) Exp -> Exp - . Termo
    (8) Termo -> . Termo * Fator
    (9) Termo -> . Termo / Fator
    (10) Termo -> . Fator
    (11) Fator -> . ( Exp )
    (12) Fator -> . num
    (13) Fator -> . id

    (               shift and go to state 11
    num             shift and go to state 12
    id              shift and go to state 13

    Termo                          shift and go to state 21
    Fator                          shift and go to state 10

state 17

    (8) Termo -> Termo * . Fator
    (11) Fator -> . ( Exp )
    (12) Fator -> . num
    (13) Fator -> . id

    (               shift and go to state 11
    num             shift and go to state 12
    id              shift and go to state 13

    Fator                          shift and go to state 22

state 18

    (9) Termo -> Termo / . Fator
    (11) Fator -> . ( Exp )
    (12) Fator -> . num
    (13) Fator -> . id

    (               shift and go to state 11
    num             shift and go to state 12
    id              shift and go to state 13

    Fator                          shift and go to state 23

state 19

    (11) Fator -> ( Exp . )
    (5) Exp -> Exp . + Termo
    (6) Exp -> Exp . - Termo

    )               shift and go to state 24
    +               shift and go to state 15
    -               shift and go to state 16


state 20

    (5) Exp -> Exp + Termo .
    (8) Termo -> Termo . * Fator
    (9) Termo -> Termo . / Fator

    +               reduce using rule 5 (Exp -> Exp + Termo .)
    -               reduce using rule 5 (Exp -> Exp + Termo .)
    $end            reduce using rule 5 (Exp -> Exp + Termo .)
    )               reduce using rule 5 (Exp -> Exp + Termo .)
    *               shift and go to state 17
    /               shift and go to state 18


state 21

    (6) Exp -> Exp - Termo .
    (8) Termo -> Termo . * Fator
    (9) Termo -> Termo . / Fator

    +               reduce using rule 6 (Exp -> Exp - Termo .)
    -               reduce using rule 6 (Exp -> Exp - Termo .)
    $end            reduce using rule 6 (Exp -> Exp - Termo .)
    )               reduce using rule 6 (Exp -> Exp - Termo .)
    *               shift and go to state 17
    /               shift and go to state 18


state 22

    (8) Termo -> Termo * Fator .

    *               reduce using rule 8 (Termo -> Termo * Fator .)
    /               reduce using rule 8 (Termo -> Termo * Fator .)
    +               reduce using rule 8 (Termo -> Termo * Fator .)
    -               reduce using rule 8 (Termo -> Termo * Fator .)
    $end            reduce using rule 8 (Termo -> Termo * Fator .)
    )               reduce using rule 8 (Termo -> Termo * Fator .)


state 23

    (9) Termo -> Termo / Fator .

    *               reduce using rule 9 (Termo -> Termo / Fator .)
    /               reduce using rule 9 (Termo -> Termo / Fator .)
    +               reduce using rule 9 (Termo -> Termo / Fator .)
    -               reduce using rule 9 (Termo -> Termo / Fator .)
    $end            reduce using rule 9 (Termo -> Termo / Fator .)
    )               reduce using rule 9 (Termo -> Termo / Fator .)


state 24

    (11) Fator -> ( Exp ) .

    *               reduce using rule 11 (Fator -> ( Exp ) .)
    /               reduce using rule 11 (Fator -> ( Exp ) .)
    +               reduce using rule 11 (Fator -> ( Exp ) .)
    -               reduce using rule 11 (Fator -> ( Exp ) .)
    $end            reduce using rule 11 (Fator -> ( Exp ) .)
    )               reduce using rule 11 (Fator -> ( Exp ) .)

